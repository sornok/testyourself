'use client'

import { useRef } from 'react'
import { useParams, useSearchParams, useRouter } from 'next/navigation'
import Head from 'next/head'
import { personalityTypes } from '@/lib/personalityTest'
import Header from '@/components/Header'
import Footer from '@/components/Footer'

export default function ReviewPage() {
  const { testType } = useParams()
  const searchParams = useSearchParams()
  const router = useRouter()

  // Extract data for review sections
  const questions = JSON.parse(searchParams.get('questions') || '[]')
  const answers = JSON.parse(searchParams.get('answers') || '{}')
  const illusions = JSON.parse(searchParams.get('illusions') || '[]')
  const challenges = JSON.parse(searchParams.get('challenges') || '[]')

  // Debug logging
  console.log('Review page data:', { testType, questions: questions.length, answers: Object.keys(answers).length, illusions: illusions.length, challenges: challenges.length })

  const opticalReviewRef = useRef<HTMLDivElement>(null)
  const memoryReviewRef = useRef<HTMLDivElement>(null)
  const triviaReviewRef = useRef<HTMLDivElement>(null)

  // Save Results functionality
  const saveResults = () => {
    const timestamp = new Date().toLocaleString()
    let content = `TestYourself - ${testType?.charAt(0).toUpperCase() + testType?.slice(1)} Test Results
Date: ${timestamp}

`

    switch (testType) {
      case 'math':
        const mathResults = JSON.parse(searchParams.get('results') || '{}')
        const mathAnswers = JSON.parse(searchParams.get('answers') || '[]')
        const mathQuestions = JSON.parse(searchParams.get('questions') || '[]')
        
        content += `Math Test Results
Date: ${timestamp}

Test Summary:
- Total Questions: ${mathResults.totalQuestions}
- Correct Answers: ${mathResults.totalScore}
- Accuracy: ${mathResults.accuracy}%
- Overall Level: ${mathResults.level} (${mathResults.overallAverage}/10)

Category Breakdown:
- Arithmetic: ${mathResults.categoryAverages.arithmetic}
- Fractions: ${mathResults.categoryAverages.fractions}
- Percentages: ${mathResults.categoryAverages.percentages}
- Algebra: ${mathResults.categoryAverages.algebra}
- Geometry: ${mathResults.categoryAverages.geometry}

Description:
${mathResults.description}

Strengths:
${mathResults.strengths.map((strength: string) => `- ${strength}`).join('\n')}

Areas for Growth:
${mathResults.areasForGrowth.map((area: string) => `- ${area}`).join('\n')}

Recommendations:
${mathResults.recommendations.map((rec: string) => `- ${rec}`).join('\n')}

Question Review:
${mathQuestions.map((question: any, index: number) => {
          const userAnswer = mathAnswers[index];
          const correctAnswer = question.correct;
          const isCorrect = userAnswer === correctAnswer;
          
          return `QUESTION ${index + 1}: ${question.question}
Your Answer: ${userAnswer !== undefined ? question.options[userAnswer] : 'Not answered'}
Correct Answer: ${question.options[correctAnswer]}
Result: ${isCorrect ? 'Correct' : 'Incorrect'}
Category: ${question.category.charAt(0).toUpperCase() + question.category.slice(1)}
`
        }).join('\n')}`
        break

      case 'personality':
        const personalityType = searchParams.get('type') || 'Unknown'
        const questions = JSON.parse(searchParams.get('questions') || '[]')
        const answers = JSON.parse(searchParams.get('answers') || '{}')
        const personality = personalityTypes[personalityType as string]
        
        content += `Personality Type: ${personalityType}
${personality ? `Name: ${personality.name}` : ''}
${personality ? `Description: ${personality.description}` : ''}

${personality ? `Traits:
${personality.traits.map((trait: string) => `- ${trait}`).join('\n')}

Areas for Growth:
${personality.weaknesses.map((weakness: string) => `- ${weakness}`).join('\n')}` : ''}

Question Review:
${questions.map((question: any, index: number) => {
          const userAnswer = answers[question.id]
          const userAnswerText = userAnswer ? question.options.find((opt: any) => opt.type === userAnswer)?.text : 'No answer'
          const typeMapping: Record<string, string> = {
            'E': 'Extraversion',
            'I': 'Introversion',
            'S': 'Sensing',
            'N': 'Intuition',
            'T': 'Thinking',
            'F': 'Feeling',
            'J': 'Judging',
            'P': 'Perceiving'
          }
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText}
   Type: ${typeMapping[userAnswer] || userAnswer || 'Unknown'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'trivia':
        const score = parseInt(searchParams.get('score') || '0', 10) || 0
        const speed = searchParams.get('speed') || 'Unknown'
        const correct = parseInt(searchParams.get('correct') || '0', 10) || 0
        const total = parseInt(searchParams.get('total') || '0', 10) || 0
        const triviaQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const triviaAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Trivia Quiz Results:
- Score: ${score}/100
- Correct Answers: ${correct}/${total}
- Speed: ${speed}
- Accuracy: ${total > 0 ? Math.round((correct / total) * 100) : 0}%

Question Review:
${triviaQuestions.map((question: any, index: number) => {
          const userAnswer = triviaAnswers[question.id]
          const isCorrect = userAnswer === question.correct
          const userAnswerText = userAnswer === -1 ? 'No answer' : question.options[userAnswer]
          const correctAnswerText = question.options[question.correct]
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText} ${isCorrect ? '(Correct)' : '(Incorrect)'}
   Correct Answer: ${correctAnswerText}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'optical-illusion':
        const results = JSON.parse(searchParams.get('results') || '{}')
        const illusions = JSON.parse(searchParams.get('illusions') || '[]')
        const illusionAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Optical Illusion Test Results:

Your Results:
- Overall Type: ${results.overallType || 'Visual Perceiver'}
- Description: Your visual perception reveals unique insights about your cognitive style

Your Visual Processing Style:
${results.personalityTraits ? Object.entries(results.personalityTraits).map(([trait, count]) => 
  `- ${trait}: ${Number(count) || 0} times (${results.totalQuestions > 0 ? Math.round((Number(count) / Number(results.totalQuestions)) * 100) : 0}%)`
).join('\n') : 'No traits data available'}

${results.insights && results.insights.length > 0 ? `Insights:
${results.insights.map((insight: string) => `- ${insight}`).join('\n')}` : ''}

Question Review:
${illusions.map((illusion: any, index: number) => {
          const userAnswer = illusionAnswers[illusion.id]
          return `${index + 1}. ${illusion.title}
   Your Answer: ${userAnswer ? userAnswer.text : 'No answer'}
   Description: ${illusion.description || 'No description available'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'memory':
        const memoryResults = JSON.parse(searchParams.get('results') || '{}')
        const memoryChallenges = JSON.parse(searchParams.get('challenges') || '[]')
        const memoryAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Memory Challenge Results:

Your Results:
- Performance: ${memoryResults.performance || 'Memory Performance'}
- Challenge Score: ${Number(memoryResults.memoryScore) || 0}%
- Detailed Accuracy: ${Number(memoryResults.detailedAccuracy) || 0}%
- Total Correct: ${Number(memoryResults.totalCorrect) || 0}/${Number(memoryResults.totalItems) || 0}
- Detailed Correct: ${Number(memoryResults.totalCorrectItems) || 0}/${Number(memoryResults.totalDetailedItems) || 0}

Challenge Review:
${memoryChallenges.map((challenge: any, index: number) => {
          const userAnswer = memoryAnswers[challenge.id]
          const isCorrect = userAnswer && userAnswer.correct
          return `${index + 1}. ${challenge.title}
   Your Answer: ${userAnswer ? userAnswer.answer : 'No answer'}
   Correct: ${isCorrect ? 'Yes' : 'No'}
   Description: ${challenge.description || 'No description available'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'emotional-intelligence':
        const eqResults = JSON.parse(searchParams.get('results') || '{}')
        const eqQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const eqAnswers = JSON.parse(searchParams.get('answers') || '[]')
        
        content += `Emotional Intelligence Test Results:

Overall Results:
- EQ Level: ${eqResults.overallLevel || 'EQ Assessment'}
- Overall Score: ${eqResults.totalScore || 0}/5
- Description: ${eqResults.description || 'Emotional intelligence assessment results'}

EQ Components:
- Self-Awareness: ${eqResults.selfAwareness || 0}/5
- Self-Regulation: ${eqResults.selfRegulation || 0}/5
- Motivation: ${eqResults.motivation || 0}/5
- Empathy: ${eqResults.empathy || 0}/5
- Social Skills: ${eqResults.socialSkills || 0}/5

Areas for Growth:
${eqResults.areasForGrowth && eqResults.areasForGrowth.length > 0 ? eqResults.areasForGrowth.map((area: string) => `- ${area}`).join('\n') : '- Great job! Keep maintaining your EQ skills'}

Key Insights:
${eqResults.insights && eqResults.insights.length > 0 ? eqResults.insights.map((insight: string) => `- ${insight}`).join('\n') : '- Continue developing your emotional intelligence'}

Question Review:
${eqQuestions.map((question: any, index: number) => {
          const userAnswer = eqAnswers[index]
          const selectedOption = question.options[userAnswer]
          return `${index + 1}. ${question.question}
   Your Answer: ${selectedOption}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      default:
        content += `Test Results saved successfully!

Generated by TestYourself
Visit https://testyourself.com for more tests!`
    }

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${testType === 'personality' ? 'character-assessment' : testType}-test-results-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Dynamic SEO content based on test type
  const getSEOContent = () => {
    const baseUrl = 'https://testyourself.com'
    
    switch (testType) {
      case 'math':
        return {
          title: 'Math Test Review - Question-by-Question Analysis | TestYourself',
          description: 'Review your math test answers! See detailed question-by-question analysis of your math problems and understand your mathematical strengths and weaknesses.',
          keywords: 'math test review, math question analysis, math answers review, arithmetic review, algebra review, geometry review, math problems analysis',
          ogTitle: 'Math Test Review - Question Analysis',
          ogDescription: 'Review your math test answers! See detailed question-by-question analysis of your math problems and mathematical performance.',
          ogImage: `${baseUrl}/images/math-test-review-og.jpg`,
          canonical: `${baseUrl}/results/math/review`
        }
      case 'personality':
        return {
          title: 'Character Assessment Review - Question Analysis | TestYourself',
          description: 'Review your character assessment questions and answers. See how each question contributed to your personality type determination. Analyze your responses and understand your character traits better.',
          keywords: 'character assessment review, personality test review, question analysis, personality type questions, character assessment answers, personality test answers, MBTI review',
          ogTitle: 'Character Assessment Review - Question Analysis',
          ogDescription: 'Review your character assessment questions and answers. See how each question contributed to your personality type determination.',
          ogImage: `${baseUrl}/images/character-assessment-review-og.jpg`,
          canonical: `${baseUrl}/results/personality/review`
        }
      case 'trivia':
        return {
          title: 'Trivia Quiz Review - Question Review | TestYourself',
          description: 'Review your trivia quiz questions and answers. See which questions you got right and wrong, with detailed explanations.',
          canonical: `${baseUrl}/results/trivia/review`
        }
      case 'emotional-intelligence':
        return {
          title: 'Emotional Intelligence Test Review - EQ Question Analysis | TestYourself',
          description: 'Review your emotional intelligence test questions and answers. See how each question assessed your EQ components and contributed to your emotional intelligence score.',
          keywords: 'emotional intelligence test review, EQ test review, emotional intelligence questions, EQ assessment review, emotional awareness questions, empathy test review',
          ogTitle: 'Emotional Intelligence Test Review - EQ Question Analysis',
          ogDescription: 'Review your emotional intelligence test questions and answers. See how each question assessed your EQ components.',
          ogImage: `${baseUrl}/images/emotional-intelligence-review-og.jpg`,
          canonical: `${baseUrl}/results/emotional-intelligence/review`
        }
      case 'optical-illusion':
        return {
          title: 'Optical Illusion Review - Visual Perception Review | TestYourself',
          description: 'Review your optical illusion test responses. Understand how your visual perception patterns were analyzed.',
          canonical: `${baseUrl}/results/optical-illusion/review`
        }
      case 'memory':
        return {
          title: 'Memory Challenge Review - Challenge Review | TestYourself',
          description: 'Review your memory challenge performance. See how well you memorized sequences and identify areas for improvement.',
          canonical: `${baseUrl}/results/memory/review`
        }
      default:
        return {
          title: 'Test Review - Question Review | TestYourself',
          description: 'Review your test questions and answers to better understand your results.',
          canonical: `${baseUrl}/results/${testType}/review`
        }
    }
  }

  const seoContent = getSEOContent()

  return (
    <>
      <Head>
        {/* Basic Meta Tags */}
        <title>{seoContent.title}</title>
        <meta name="description" content={seoContent.description} />
        <meta name="keywords" content={seoContent.keywords} />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="canonical" href={seoContent.canonical} />
        
        {/* Open Graph Tags */}
        <meta property="og:title" content={seoContent.ogTitle} />
        <meta property="og:description" content={seoContent.ogDescription} />
        <meta property="og:image" content={seoContent.ogImage} />
        <meta property="og:url" content={seoContent.canonical} />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="TestYourself" />
        
        {/* Twitter Card Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={seoContent.ogTitle} />
        <meta name="twitter:description" content={seoContent.ogDescription} />
        <meta name="twitter:image" content={seoContent.ogImage} />
        
        {/* JSON-LD Schema Markup */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebPage",
              "name": "Character Assessment Review",
              "description": "Review your character assessment questions and answers to understand how your personality type was determined.",
              "url": seoContent.canonical,
              "mainEntity": {
                "@type": "FAQPage",
                "mainEntity": testType === 'emotional-intelligence' ? [
                  {
                    "@type": "Question",
                    "name": "How are emotional intelligence test questions analyzed?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Each emotional intelligence question is designed to assess specific EQ components like self-awareness, self-regulation, motivation, empathy, and social skills. Your answers are analyzed to determine your emotional intelligence level and identify areas for growth."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "Why should I review my emotional intelligence test answers?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Reviewing your answers helps you understand how each question contributed to your EQ score and provides deeper insight into your emotional awareness, empathy, and social skills. It's valuable for personal development and self-reflection."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "What do the EQ component categories mean in the review?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "The EQ component categories (self-awareness, self-regulation, motivation, empathy, social skills) represent the five pillars of emotional intelligence. Each question is categorized to assess your strengths and weaknesses in these specific emotional competencies."
                    }
                  }
                ] : [
                  {
                    "@type": "Question",
                    "name": "How are character assessment questions analyzed?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Each question in the character assessment is designed to measure specific personality dimensions. Your answers are analyzed to determine your preferences across different personality traits."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "Why should I review my character assessment answers?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Reviewing your answers helps you understand how each question contributed to your personality type determination and provides deeper insight into your character traits."
                    }
                  }
                ]
              }
            })
          }}
        />
      </Head>
      
      <div className="min-h-screen flex flex-col">
        <div className="pt-2 px-4 sm:px-6 lg:px-8 flex-grow">
          <div className="max-w-6xl mx-auto overflow-x-hidden">
            {/* Header */}
            <Header onLogoClick={undefined} />

            {/* Test Title */}
            <div className="text-center mb-2 mt-2">
              <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
                <h1 className="text-lg font-bold text-gray-800">
                  {testType === 'personality' ? 'Character Assessment Review' :
                   testType === 'math' ? 'Math Test Review' :
                   testType === 'emotional-intelligence' ? 'Emotional Intelligence Test Review' :
                   testType === 'trivia' ? 'Trivia Quiz Review' :
                   testType === 'memory' ? 'Memory Challenge Review' :
                   testType === 'optical-illusion' ? 'Optical Illusion Review' :
                   'Test Review'}
                </h1>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="mt-2 mb-2">
              <div className="bg-gray-50 rounded-2xl shadow-lg p-2">
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <button
                    onClick={() => router.push(`/results/${testType}/share?${searchParams.toString()}`)}
                    className="px-8 py-3 bg-sage-500 text-white rounded-full font-medium hover:bg-sage-600 transition-all duration-300"
                  >
                    📤 Share Results
                  </button>
                  <button
                    onClick={() => router.push(`/results/${testType}?${searchParams.toString()}`)}
                    className="px-8 py-3 bg-blue-500 text-white rounded-full font-medium hover:bg-blue-600 transition-all duration-300"
                  >
                    📋 Hide Review
                  </button>
                  <button
                    onClick={saveResults}
                    className="px-8 py-3 bg-orange-500 text-white rounded-full font-medium hover:bg-orange-600 transition-all duration-300"
                  >
                    💾 Save Results
                  </button>
                  <button
                    onClick={() => router.push(`/${testType}`)}
                    className="px-8 py-3 bg-green-500 text-white rounded-full font-medium hover:bg-green-600 transition-all duration-300"
                  >
                    {testType === 'typing' ? '🔄 Try Another Challenge' : '🔄 Retake Test'}
                  </button>
                </div>
              </div>
            </div>

            {/* Review Sections - All test types */}
            <>
              {/* Emotional Intelligence Test Review */}
              {testType === 'emotional-intelligence' && questions.length > 0 && (
                <div ref={triviaReviewRef} className="bg-indigo-50 rounded-2xl shadow-lg p-3 mt-2">
                  <h3 className="text-lg font-bold text-gray-800 mb-2 text-center">Question Review</h3>
                  <div className="space-y-3">
                    {questions.map((question: any, index: number) => {
                      const userAnswer = answers[index]
                      const selectedOption = question.options[userAnswer]
                      return (
                        <div key={index} className="bg-white rounded-lg p-2">
                          <div className="flex items-start gap-2 mb-2">
                            <span className="bg-indigo-100 text-indigo-700 text-xs font-medium px-2 py-1 rounded" aria-label={`Question ${index + 1}`}>
                              QUESTION {index + 1}
                            </span>
                            <span className="text-sm text-gray-600">
                              {question.category.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                            </span>
                          </div>
                          <p className="text-sm font-medium text-gray-800 mb-2">{question.question}</p>
                          <div className="text-sm text-gray-600">
                            <span className="font-medium">Your Answer:</span> {selectedOption?.text || 'Not answered'}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Math Test Review */}
              {testType === 'math' && questions.length > 0 && (
                <div className="bg-white rounded-2xl shadow-lg p-6 mb-2">
                  <h2 className="text-xl font-semibold text-gray-800 mb-4">Question Review</h2>
                  <div className="space-y-4">
                    {questions.map((question: any, index: number) => {
                      const userAnswer = answers[index]
                      const correctAnswer = question.correct
                      const isCorrect = userAnswer === correctAnswer
                      
                      return (
                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex justify-between items-start mb-2">
                            <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm font-medium">
                              QUESTION {index + 1}
                            </span>
                            <span className={`px-2 py-1 rounded text-sm font-medium ${
                              isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                            }`}>
                              {isCorrect ? 'Correct' : 'Incorrect'}
                            </span>
                          </div>
                          <p className="text-gray-800 mb-3">{question.question}</p>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="text-sm font-medium text-gray-600 mb-1">Your Answer:</p>
                              <p className="text-sm bg-gray-50 p-2 rounded border">
                                {userAnswer !== undefined ? question.options[userAnswer] : 'Not answered'}
                              </p>
                            </div>
                            <div>
                              <p className="text-sm font-medium text-gray-600 mb-1">Correct Answer:</p>
                              <p className="text-sm bg-green-50 p-2 rounded border border-green-200">
                                {question.options[correctAnswer]}
                              </p>
                            </div>
                          </div>
                          <div className="mt-2">
                            <span className="text-xs text-gray-500">
                              Category: {question.category.charAt(0).toUpperCase() + question.category.slice(1)}
                            </span>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Character Assessment Review */}
              {testType === 'personality' && questions.length > 0 && (
                <div ref={triviaReviewRef} className="bg-sage-50 rounded-2xl shadow-lg p-4">
                  <h3 className="text-lg font-bold text-sage-800 mb-2 text-center">Question Review</h3>
                  <div className="space-y-3">
                    {questions.map((question: any, index: number) => {
                      const userAnswer = answers[question.id]
                      const userAnswerText = userAnswer ? question.options.find((opt: any) => opt.type === userAnswer)?.text : 'No answer'
                      
                      return (
                        <div key={question.id} className="border border-sage-200 rounded-lg p-3 bg-sage-50">
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-xs font-medium">
                                  Question {index + 1}
                                </span>
                              </div>
                              <h4 className="text-sm font-semibold text-sage-800 mb-2">
                                {question.question}
                              </h4>
                            </div>
                          </div>
                          
                          <div>
                            <p className="text-sm font-medium text-sage-600 mb-1">Your Answer:</p>
                            <div className="p-2 rounded-lg border border-sage-200 text-sm text-sage-800" style={{backgroundColor: '#fefcff'}}>
                              {userAnswerText}
                            </div>
                            <p className="text-sm text-sage-500 mt-1">
                              Type: {userAnswer ? (userAnswer === 'E' ? 'Extraversion' : userAnswer === 'I' ? 'Introversion' : userAnswer === 'S' ? 'Sensing' : userAnswer === 'N' ? 'Intuition' : userAnswer === 'T' ? 'Thinking' : userAnswer === 'F' ? 'Feeling' : userAnswer === 'J' ? 'Judging' : userAnswer === 'P' ? 'Perceiving' : userAnswer) : 'Unknown'}
                            </p>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Trivia Test Review */}
              {testType === 'trivia' && questions.length > 0 && (
                <div ref={triviaReviewRef} className="bg-purple-50 rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-bold text-green-800 mb-2 text-center">Question Review</h3>
                  <div className="space-y-4">
                    {questions.map((question: any, index: number) => {
                      const userAnswer = answers[question.id]
                      const isCorrect = userAnswer === question.correct
                      const userAnswerText = userAnswer === -1 ? 'No answer' : question.options[userAnswer]
                      const correctAnswerText = question.options[question.correct]
                      
                      return (
                        <div key={question.id} className={`border-2 rounded-xl p-4 ${
                          isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                        }`}>
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-sm font-medium">
                                  QUESTION {index + 1}
                                </span>
                                <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded text-sm font-medium">
                                  {question.category}
                                </span>
                              </div>
                              <h4 className="text-xl font-semibold text-gray-800 mb-2">
                                {question.question}
                              </h4>
                            </div>
                            <div className={`text-2xl ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>
                              {isCorrect ? '✅' : '❌'}
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="text-base font-medium text-gray-600 mb-2">Your Answer:</p>
                              <div className={`p-3 rounded-lg text-lg ${
                                isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                              }`}>
                                {userAnswerText}
                              </div>
                            </div>
                            <div>
                              <p className="text-base font-medium text-gray-600 mb-2">Correct Answer:</p>
                              <div className="p-3 rounded-lg bg-green-100 text-green-800 text-lg">
                                {correctAnswerText}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Optical Illusion Test Review */}
              {testType === 'optical-illusion' && illusions.length > 0 && (
                <div ref={opticalReviewRef} className="bg-sage-50 rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-bold text-sage-800 mb-2 text-center">Question Review</h3>
                  <div className="space-y-4">
                    {illusions.map((illusion: any, index: number) => {
                      const userAnswer = answers[illusion.id]
                      return (
                        <div key={illusion.id} className="border border-sage-200 rounded-xl p-4 bg-sage-50">
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-sm font-medium">
                                  Question {index + 1}
                                </span>
                              </div>
                              <h4 className="text-lg font-semibold text-sage-800 mb-2">
                                {illusion.title}
                              </h4>
                            </div>
                          </div>
                          
                          <div className="mb-2">
                            <div className="bg-sage-50 rounded-2xl p-4 border-2 border-sage-200">
                              <div className="flex justify-center">
                                <img 
                                  src={illusion.image} 
                                  alt={illusion.title}
                                  className="max-w-full h-auto max-h-36 rounded-lg shadow-lg"
                                />
                              </div>
                            </div>
                          </div>
                          
                          <div>
                            <p className="text-base font-medium text-sage-600 mb-2">Your Answer:</p>
                            <div className="p-3 rounded-lg border border-sage-200 text-lg text-sage-800" style={{backgroundColor: '#fefcff'}}>
                              {userAnswer ? userAnswer.text : 'No answer'}
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Memory Test Review */}
              {testType === 'memory' && challenges.length > 0 && (
                <div ref={memoryReviewRef} className="bg-purple-50 rounded-2xl shadow-lg p-6">
                  <h3 className="text-xl font-bold text-sage-800 mb-2 text-center">Challenge Review</h3>
                  <div className="space-y-4">
                    {challenges.map((challenge: any, index: number) => {
                      const userAnswer = answers[challenge.id]
                      const isCorrect = userAnswer && userAnswer.correct
                      
                      return (
                        <div key={challenge.id} className={`border-2 rounded-xl p-4 ${
                          isCorrect ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'
                        }`}>
                          <div className="flex justify-between items-start mb-2">
                            <div className="flex-1">
                              <div className="flex items-center gap-3 mb-2">
                                <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-sm font-medium">
                                  Challenge {index + 1}
                                </span>
                              </div>
                              <h4 className="text-xl font-semibold text-sage-800 mb-2">
                                {challenge.title}
                              </h4>
                            </div>
                            <div className={`text-2xl ${isCorrect ? 'text-green-600' : 'text-red-600'}`}>
                              {isCorrect ? '✅' : '❌'}
                            </div>
                          </div>
                          
                          {/* Item-level accuracy */}
                          <div className="mb-2">
                            <div className="flex items-center">
                              <span className="text-sm font-medium text-sage-600">Item Accuracy:</span>
                              <span className="text-sm font-bold text-sage-800 ml-1">
                                {userAnswer ? (() => {
                                  const userSeq = userAnswer.userSequence || [];
                                  const correctSeq = challenge.sequence;
                                  let correctItems = 0;
                                  for (let i = 0; i < Math.min(correctSeq.length, userSeq.length); i++) {
                                    if (correctSeq[i] === userSeq[i]) correctItems++;
                                  }
                                  return `${correctItems}/${correctSeq.length}`;
                                })() : '0/0'}
                              </span>
                            </div>
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                              <p className="text-base font-medium text-sage-600 mb-2">Your Answer:</p>
                              <div className="p-1 rounded-lg text-xl flex flex-wrap gap-1">
                                {userAnswer && userAnswer.userSequence ? (
                                  userAnswer.userSequence.map((item: any, index: number) => {
                                    const correctSeq = challenge.sequence;
                                    const isItemCorrect = index < correctSeq.length && item === correctSeq[index];
                                    return (
                                      <span 
                                        key={index}
                                        className={`rounded ${
                                          isItemCorrect 
                                            ? 'bg-green-200 text-green-800' 
                                            : 'bg-red-200 text-red-800'
                                        }`}
                                      >
                                        {item}
                                      </span>
                                    );
                                  })
                                ) : (
                                  <span className="text-gray-500">No answer</span>
                                )}
                              </div>
                            </div>
                            <div>
                              <p className="text-base font-medium text-sage-600 mb-2">Correct Answer:</p>
                              <div className="p-1 rounded-lg bg-green-100 text-green-800 text-xl">
                                {challenge.sequence.join(', ')}
                              </div>
                            </div>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}
            </>

            {/* Bottom spacing */}
            <div className="mb-2"></div>

          </div>
        </div>
        
        {/* Footer Component */}
        <Footer />
      </div>
    </>
  )
}
