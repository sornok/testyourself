'use client'

import { useParams, useSearchParams, useRouter } from 'next/navigation'
import Head from 'next/head'
import { personalityTypes } from '@/lib/personalityTest'
import Header from '@/components/Header'
import Footer from '@/components/Footer'

export default function SharePage() {
  const { testType } = useParams()
  const searchParams = useSearchParams()
  const router = useRouter()

  // Save Results functionality
  const saveResults = () => {
    const timestamp = new Date().toLocaleString()
    let content = `TestYourself - ${testType?.charAt(0).toUpperCase() + testType?.slice(1)} Test Results
Date: ${timestamp}

`

    switch (testType) {
      case 'personality':
        const personalityType = searchParams.get('type') || 'Unknown'
        const questions = JSON.parse(searchParams.get('questions') || '[]')
        const answers = JSON.parse(searchParams.get('answers') || '{}')
        const personality = personalityTypes[personalityType as string]
        
        content += `Personality Type: ${personalityType}
${personality ? `Name: ${personality.name}` : ''}
${personality ? `Description: ${personality.description}` : ''}

${personality ? `Traits:
${personality.traits.map((trait: string) => `- ${trait}`).join('\n')}

Areas for Growth:
${personality.weaknesses.map((weakness: string) => `- ${weakness}`).join('\n')}` : ''}

Question Review:
${questions.map((question: any, index: number) => {
          const userAnswer = answers[question.id]
          const userAnswerText = userAnswer ? question.options.find((opt: any) => opt.type === userAnswer)?.text : 'No answer'
          const typeMapping: Record<string, string> = {
            'E': 'Extraversion',
            'I': 'Introversion',
            'S': 'Sensing',
            'N': 'Intuition',
            'T': 'Thinking',
            'F': 'Feeling',
            'J': 'Judging',
            'P': 'Perceiving'
          }
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText}
   Type: ${typeMapping[userAnswer] || userAnswer || 'Unknown'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'trivia':
        const score = parseInt(searchParams.get('score') || '0', 10) || 0
        const speed = searchParams.get('speed') || 'Unknown'
        const correct = parseInt(searchParams.get('correct') || '0', 10) || 0
        const total = parseInt(searchParams.get('total') || '0', 10) || 0
        const triviaQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const triviaAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Trivia Quiz Results:
- Score: ${score}/100
- Correct Answers: ${correct}/${total}
- Speed: ${speed}
- Accuracy: ${total > 0 ? Math.round((correct / total) * 100) : 0}%

Question Review:
${triviaQuestions.map((question: any, index: number) => {
          const userAnswer = triviaAnswers[question.id]
          const isCorrect = userAnswer === question.correct
          const userAnswerText = userAnswer === -1 ? 'No answer' : question.options[userAnswer]
          const correctAnswerText = question.options[question.correct]
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText} ${isCorrect ? '(Correct)' : '(Incorrect)'}
   Correct Answer: ${correctAnswerText}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'optical-illusion':
        const results = JSON.parse(searchParams.get('results') || '{}')
        const illusions = JSON.parse(searchParams.get('illusions') || '[]')
        const illusionAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Optical Illusion Test Results:

Your Results:
- Overall Type: ${results.overallType || 'Visual Perceiver'}
- Description: Your visual perception reveals unique insights about your cognitive style

Your Visual Processing Style:
${results.personalityTraits ? Object.entries(results.personalityTraits).map(([trait, count]) => 
  `- ${trait}: ${Number(count) || 0} times (${results.totalQuestions > 0 ? Math.round((Number(count) / Number(results.totalQuestions)) * 100) : 0}%)`
).join('\n') : 'No traits data available'}

${results.insights && results.insights.length > 0 ? `Insights:
${results.insights.map((insight: string) => `- ${insight}`).join('\n')}` : ''}

Question Review:
${illusions.map((illusion: any, index: number) => {
          const userAnswer = illusionAnswers[illusion.id]
          return `${index + 1}. ${illusion.title}
   Your Answer: ${userAnswer ? userAnswer.text : 'No answer'}
   Description: ${illusion.description || 'No description available'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'memory':
        const memoryResults = JSON.parse(searchParams.get('results') || '{}')
        const memoryChallenges = JSON.parse(searchParams.get('challenges') || '[]')
        const memoryAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Memory Challenge Results:

Your Results:
- Performance: ${memoryResults.performance || 'Memory Performance'}
- Challenge Score: ${Number(memoryResults.memoryScore) || 0}%
- Detailed Accuracy: ${Number(memoryResults.detailedAccuracy) || 0}%
- Total Correct: ${Number(memoryResults.totalCorrect) || 0}/${Number(memoryResults.totalItems) || 0}
- Detailed Correct: ${Number(memoryResults.totalCorrectItems) || 0}/${Number(memoryResults.totalDetailedItems) || 0}

Challenge Review:
${memoryChallenges.map((challenge: any, index: number) => {
          const userAnswer = memoryAnswers[challenge.id]
          const isCorrect = userAnswer && userAnswer.correct
          return `${index + 1}. ${challenge.title}
   Your Answer: ${userAnswer ? userAnswer.answer : 'No answer'}
   Correct: ${isCorrect ? 'Yes' : 'No'}
   Description: ${challenge.description || 'No description available'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'emotional-intelligence':
        const eqResults = JSON.parse(searchParams.get('results') || '{}')
        const eqQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const eqAnswers = JSON.parse(searchParams.get('answers') || '[]')
        
        content += `Emotional Intelligence Test Results:

Overall Results:
- EQ Level: ${eqResults.overallLevel || 'EQ Assessment'}
- Overall Score: ${eqResults.totalScore || 0}/5
- Description: ${eqResults.description || 'Emotional intelligence assessment results'}

EQ Components:
- Self-Awareness: ${eqResults.selfAwareness || 0}/5
- Self-Regulation: ${eqResults.selfRegulation || 0}/5
- Motivation: ${eqResults.motivation || 0}/5
- Empathy: ${eqResults.empathy || 0}/5
- Social Skills: ${eqResults.socialSkills || 0}/5

Areas for Growth:
${eqResults.areasForGrowth && eqResults.areasForGrowth.length > 0 ? eqResults.areasForGrowth.map((area: string) => `- ${area}`).join('\n') : '- Great job! Keep maintaining your EQ skills'}

Key Insights:
${eqResults.insights && eqResults.insights.length > 0 ? eqResults.insights.map((insight: string) => `- ${insight}`).join('\n') : '- Continue developing your emotional intelligence'}

Question Review:
${eqQuestions.map((question: any, index: number) => {
          const userAnswer = eqAnswers[index]
          const selectedOption = question.options[userAnswer]
          return `${index + 1}. ${question.question}
   Your Answer: ${selectedOption}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      default:
        content += `Test Results saved successfully!

Generated by TestYourself
Visit https://testyourself.com for more tests!`
    }

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${testType === 'personality' ? 'character-assessment' : testType}-test-results-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Generate share content based on test type
  const getShareContent = () => {
    const baseUrl = window.location.origin
    const testName = (testType as string).charAt(0).toUpperCase() + (testType as string).slice(1).replace('-', ' ')
    
    let title = ''
    let description = ''
    let hashtags = '#TestYourself #SelfDiscovery'
    
    switch (testType) {
      case 'personality':
        title = 'I just discovered my character type!'
        description = 'Take the character assessment and discover your personality type. Find out what makes you unique!'
        hashtags = '#CharacterAssessment #PersonalityTest #SelfDiscovery #TestYourself #PersonalityType'
        break
      case 'emotional-intelligence':
        title = 'I just tested my emotional intelligence!'
        description = 'Discover your EQ level and emotional awareness. Take the emotional intelligence test!'
        hashtags = '#EmotionalIntelligence #EQTest #SelfAwareness #Empathy #TestYourself #EQAssessment'
        break
      case 'trivia':
        title = 'I just tested my general knowledge!'
        description = 'How much do you know? Take this trivia quiz and challenge yourself!'
        hashtags = '#TriviaQuiz #GeneralKnowledge #TestYourself #Quiz'
        break
      case 'optical-illusion':
        title = 'I just tested my visual perception!'
        description = 'Discover how your brain processes images with these optical illusions!'
        hashtags = '#OpticalIllusion #VisualPerception #BrainTest #TestYourself'
        break
      case 'memory':
        title = 'I just tested my memory skills!'
        description = 'Challenge your memory with sequence tests and see how well you remember!'
        hashtags = '#MemoryTest #BrainTraining #MemorySkills #TestYourself'
        break
      case 'typing':
        title = 'I just tested my typing speed!'
        description = 'How fast can you type? Test your speed and accuracy with this typing challenge!'
        hashtags = '#TypingTest #TypingSpeed #TestYourself #Skills'
        break
      default:
        title = 'I just took an amazing test!'
        description = 'Discover more about yourself with these fun and insightful tests!'
        hashtags = '#TestYourself #SelfDiscovery'
    }
    
    return {
      url: `${baseUrl}/${testType}`,
      title,
      description,
      hashtags,
      text: `${title} ${description} ${hashtags}`
    }
  }

  const handleXShare = () => {
    const content = getShareContent()
    const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(content.text)}&url=${encodeURIComponent(content.url)}`
    window.open(url, '_blank', 'width=800,height=600')
  }

  const handleFacebookShare = () => {
    // Facebook sharing disabled - requires live site
    alert('Facebook sharing will be available when the site is live!')
  }

  const showNotification = (message: string) => {
    // Create a custom notification instead of using alert
    const notification = document.createElement('div')
    notification.textContent = message
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: #10b981;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
      z-index: 1000;
      font-family: system-ui, sans-serif;
      font-size: 14px;
    `
    document.body.appendChild(notification)
    
    // Remove after 3 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification)
      }
    }, 3000)
  }

  const handleShare = async () => {
    try {
      if (navigator.share) {
        await navigator.share({
          title: 'My TestYourself Results',
          text: '',
          url: ''
        })
        return
      }
    } catch (error) {
      console.log('Native share failed')
    }

    // Fallback - just show a message
    showNotification('Choose a platform from the popup to share your results!')
  }

  // Dynamic SEO content based on test type
  const getSEOContent = () => {
    const baseUrl = 'https://testyourself.com'
    
    switch (testType) {
      case 'personality':
        return {
          title: 'Share Character Assessment Results | TestYourself',
          description: 'Share your character assessment results with friends and family. Let them discover their personality type and character traits too! Take our free personality test.',
          keywords: 'share character assessment, share personality test results, character assessment results, personality type sharing, character traits sharing, free personality test',
          ogTitle: 'Share Character Assessment Results',
          ogDescription: 'Share your character assessment results with friends and family. Let them discover their personality type too!',
          ogImage: `${baseUrl}/images/character-assessment-share-og.jpg`,
          canonical: `${baseUrl}/results/personality/share`
        }
      case 'emotional-intelligence':
        return {
          title: 'Share Emotional Intelligence Test Results | TestYourself',
          description: 'Share your emotional intelligence test results with friends and family. Let them discover their EQ level and emotional awareness too! Take our free EQ test.',
          keywords: 'share emotional intelligence results, share EQ test results, emotional intelligence sharing, EQ level sharing, emotional awareness sharing, free EQ test',
          ogTitle: 'Share Emotional Intelligence Test Results',
          ogDescription: 'Share your emotional intelligence test results with friends and family. Let them discover their EQ level too!',
          ogImage: `${baseUrl}/images/emotional-intelligence-share-og.jpg`,
          canonical: `${baseUrl}/results/emotional-intelligence/share`
        }
      case 'trivia':
        return {
          title: 'Share Trivia Quiz Results | TestYourself',
          description: 'Share your trivia quiz results and challenge others to beat your score!',
          canonical: `${baseUrl}/results/trivia/share`
        }
      case 'optical-illusion':
        return {
          title: 'Share Optical Illusion Test Results | TestYourself',
          description: 'Share your visual perception test results and challenge others to discover their cognitive style!',
          canonical: `${baseUrl}/results/optical-illusion/share`
        }
      case 'memory':
        return {
          title: 'Share Memory Challenge Results | TestYourself',
          description: 'Share your memory test results and challenge others to test their memory skills!',
          canonical: `${baseUrl}/results/memory/share`
        }
      default:
        return {
          title: 'Share Test Results | TestYourself',
          description: 'Share your test results and challenge others to discover themselves!',
          canonical: `${baseUrl}/results/${testType}/share`
        }
    }
  }

  const seoContent = getSEOContent()

  return (
    <>
      <Head>
        {/* Basic Meta Tags */}
        <title>{seoContent.title}</title>
        <meta name="description" content={seoContent.description} />
        <meta name="keywords" content={seoContent.keywords} />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="canonical" href={seoContent.canonical} />
        
        {/* Open Graph Tags */}
        <meta property="og:title" content={seoContent.ogTitle} />
        <meta property="og:description" content={seoContent.ogDescription} />
        <meta property="og:image" content={seoContent.ogImage} />
        <meta property="og:url" content={seoContent.canonical} />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="TestYourself" />
        
        {/* Twitter Card Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={seoContent.ogTitle} />
        <meta name="twitter:description" content={seoContent.ogDescription} />
        <meta name="twitter:image" content={seoContent.ogImage} />
        
        {/* JSON-LD Schema Markup */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebPage",
              "name": "Share Character Assessment Results",
              "description": "Share your character assessment results with friends and family. Let them discover their personality type too!",
              "url": seoContent.canonical,
              "mainEntity": {
                "@type": "FAQPage",
                "mainEntity": testType === 'emotional-intelligence' ? [
                  {
                    "@type": "Question",
                    "name": "How can I share my emotional intelligence test results?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "You can share your emotional intelligence test results on social media platforms like X (Twitter), Facebook, and LinkedIn. You can also save your results as a text file to share privately or discuss with friends and family."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "Why should I share my emotional intelligence test results?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Sharing your EQ test results can help others discover their own emotional intelligence level and encourage them to take the assessment. It's a great conversation starter about emotional awareness, empathy, and personal development."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "What information is included when I share my EQ results?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "When sharing your emotional intelligence results, you can include your overall EQ level, component scores (self-awareness, self-regulation, motivation, empathy, social skills), and key insights. You control how much information to share publicly."
                    }
                  }
                ] : [
                  {
                    "@type": "Question",
                    "name": "How can I share my character assessment results?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "You can share your character assessment results on social media platforms like X (Twitter), Facebook, and LinkedIn. You can also save your results as a text file to share privately."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "Why should I share my character assessment results?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Sharing your results can help others discover their own personality type and encourage them to take the character assessment. It's also a great conversation starter about personality and self-discovery."
                    }
                  }
                ]
              }
            })
          }}
        />
      </Head>
      
      <div className="min-h-screen flex flex-col">
        <div className="pt-2 px-4 sm:px-6 lg:px-8 flex-grow">
          <div className="max-w-6xl mx-auto overflow-x-hidden">
            {/* Header */}
            <Header onLogoClick={undefined} />

            {/* Test Title */}
            <div className="text-center mb-2 mt-2">
              <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
                <h1 className="text-lg font-bold text-gray-800">
                  {testType === 'personality' ? 'Character Assessment Results' :
                   testType === 'emotional-intelligence' ? 'Emotional Intelligence Test Results' :
                   testType === 'trivia' ? 'Trivia Quiz Results' :
                   testType === 'memory' ? 'Memory Challenge Results' :
                   testType === 'optical-illusion' ? 'Optical Illusion Test Results' :
                   'Test Results'}
                </h1>
              </div>
            </div>

            {/* Action Buttons - For Emotional Intelligence, Personality, Trivia, and Memory Tests */}
            {(testType === 'emotional-intelligence' || testType === 'personality' || testType === 'trivia' || testType === 'memory') && (
              <div className="mb-2">
                <div className="bg-gray-50 rounded-2xl shadow-lg p-2">
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <button
                      onClick={() => router.push(`/results/${testType}?${searchParams.toString()}`)}
                      className="px-8 py-3 bg-sage-500 text-white rounded-full font-medium hover:bg-sage-600 transition-all duration-300"
                    >
                      📤 Hide Share
                    </button>
                    <button
                      onClick={() => router.push(`/results/${testType}/review?${searchParams.toString()}`)}
                      className="px-8 py-3 bg-blue-500 text-white rounded-full font-medium hover:bg-blue-600 transition-all duration-300"
                    >
                      📋 Show Review
                    </button>
                    <button
                      onClick={saveResults}
                      className="px-8 py-3 bg-orange-500 text-white rounded-full font-medium hover:bg-orange-600 transition-all duration-300"
                    >
                      💾 Save Results
                    </button>
                    <button
                      onClick={() => router.push(`/${testType}`)}
                      className="px-8 py-3 bg-green-500 text-white rounded-full font-medium hover:bg-green-600 transition-all duration-300"
                    >
                      🔄 Retake Test
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Share Section */}
            <div className="bg-purple-50 rounded-2xl shadow-lg p-4 mt-2 mb-2">
              <h3 className="text-xl font-bold text-gray-800 mb-2 text-center">Share Your Results</h3>
              <p className="text-gray-600 mb-2 text-center">Choose a platform to share your EQ test results</p>
              
              <div className="flex justify-start">
                <button
                  onClick={handleXShare}
                  className="p-4 text-left bg-white hover:bg-blue-50 rounded-2xl shadow-lg transition-colors flex items-center border border-blue-200"
                  style={{width: '210px'}}
                >
                  <span className="text-2xl mr-3" aria-label="X (formerly Twitter) logo">𝕏</span>
                  <div className="flex-1 text-center">
                    <div className="font-semibold text-blue-800">X.com</div>
                    <div className="text-sm text-blue-600">Share on X</div>
                  </div>
                </button>
              </div>
            </div>

            {/* Action Buttons - Exclude Emotional Intelligence, Personality, Trivia, and Memory as they have their own buttons at top */}
            {testType !== 'emotional-intelligence' && testType !== 'personality' && testType !== 'trivia' && testType !== 'memory' && (
              <div className="mt-2 mb-2">
                <div className="bg-gray-50 rounded-2xl shadow-lg p-2">
                  <div className="flex flex-col sm:flex-row gap-4 justify-center">
                    <button
                      onClick={() => router.push(`/results/${testType}?${searchParams.toString()}`)}
                      className="px-8 py-3 bg-sage-500 text-white rounded-full font-medium hover:bg-sage-600 transition-all duration-300"
                    >
                      📤 Hide Share
                    </button>
                    <button
                      onClick={() => router.push(`/results/${testType}/review?${searchParams.toString()}`)}
                      className="px-8 py-3 bg-blue-500 text-white rounded-full font-medium hover:bg-blue-600 transition-all duration-300"
                    >
                      📋 Show Review
                    </button>
                    <button
                      onClick={saveResults}
                      className="px-8 py-3 bg-orange-500 text-white rounded-full font-medium hover:bg-orange-600 transition-all duration-300"
                    >
                      💾 Save Results
                    </button>
                    <button
                      onClick={() => router.push(`/${testType}`)}
                      className="px-8 py-3 bg-green-500 text-white rounded-full font-medium hover:bg-green-600 transition-all duration-300"
                    >
                      {testType === 'typing' ? '🔄 Try Another Challenge' : '🔄 Retake Test'}
                    </button>
                  </div>
                </div>
              </div>
            )}

          </div>
        </div>
        
        {/* Footer Component */}
        <Footer />
      </div>
    </>
  )
}
