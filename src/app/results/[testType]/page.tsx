'use client'

import { useParams, useSearchParams, useRouter } from 'next/navigation'
import Head from 'next/head'
import { personalityTypes } from '@/lib/personalityTest'
import Header from '@/components/Header'
import Footer from '@/components/Footer'

export default function ResultsPage() {
  const { testType } = useParams()
  const searchParams = useSearchParams()
  const router = useRouter()

  // Save Results functionality
  const saveResults = () => {
    const timestamp = new Date().toLocaleString()
    let content = `TestYourself - ${testType?.charAt(0).toUpperCase() + testType?.slice(1)} Test Results
Date: ${timestamp}

`

    switch (testType) {
      case 'personality':
        const personalityType = searchParams.get('type') || 'Unknown'
        const questions = JSON.parse(searchParams.get('questions') || '[]')
        const answers = JSON.parse(searchParams.get('answers') || '{}')
        const personality = personalityTypes[personalityType as string]
        
        content += `Personality Type: ${personalityType}
${personality ? `Name: ${personality.name}` : ''}
${personality ? `Description: ${personality.description}` : ''}

${personality ? `Traits:
${personality.traits.map((trait: string) => `- ${trait}`).join('\n')}

Areas for Growth:
${personality.weaknesses.map((weakness: string) => `- ${weakness}`).join('\n')}` : ''}

Question Review:
${questions.map((question: any, index: number) => {
          const userAnswer = answers[question.id]
          const userAnswerText = userAnswer ? question.options.find((opt: any) => opt.type === userAnswer)?.text : 'No answer'
          const typeMapping: Record<string, string> = {
            'E': 'Extraversion',
            'I': 'Introversion',
            'S': 'Sensing',
            'N': 'Intuition',
            'T': 'Thinking',
            'F': 'Feeling',
            'J': 'Judging',
            'P': 'Perceiving'
          }
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText}
   Type: ${typeMapping[userAnswer] || userAnswer || 'Unknown'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'trivia':
        const score = parseInt(searchParams.get('score') || '0', 10) || 0
        const speed = searchParams.get('speed') || 'Unknown'
        const correct = parseInt(searchParams.get('correct') || '0', 10) || 0
        const total = parseInt(searchParams.get('total') || '0', 10) || 0
        const triviaQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const triviaAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Trivia Quiz Results:
- Score: ${score}/100
- Correct Answers: ${correct}/${total}
- Speed: ${speed}
- Accuracy: ${total > 0 ? Math.round((correct / total) * 100) : 0}%

Question Review:
${triviaQuestions.map((question: any, index: number) => {
          const userAnswer = triviaAnswers[question.id]
          const isCorrect = userAnswer === question.correct
          const userAnswerText = userAnswer === -1 ? 'No answer' : question.options[userAnswer]
          const correctAnswerText = question.options[question.correct]
          return `${index + 1}. ${question.question}
   Your Answer: ${userAnswerText} ${isCorrect ? '(Correct)' : '(Incorrect)'}
   Correct Answer: ${correctAnswerText}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'optical-illusion':
        const results = JSON.parse(searchParams.get('results') || '{}')
        const illusions = JSON.parse(searchParams.get('illusions') || '[]')
        const illusionAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Optical Illusion Test Results:

Your Results:
- Overall Type: ${results.overallType || 'Visual Perceiver'}
- Description: Your visual perception reveals unique insights about your cognitive style

Your Visual Processing Style:
${results.personalityTraits ? Object.entries(results.personalityTraits).map(([trait, count]) => 
  `- ${trait}: ${Number(count) || 0} times (${results.totalQuestions > 0 ? Math.round((Number(count) / Number(results.totalQuestions)) * 100) : 0}%)`
).join('\n') : 'No traits data available'}

${results.insights && results.insights.length > 0 ? `Insights:
${results.insights.map((insight: string) => `- ${insight}`).join('\n')}` : ''}

Question Review:
${illusions.map((illusion: any, index: number) => {
          const userAnswer = illusionAnswers[illusion.id]
          return `${index + 1}. ${illusion.title}
   Your Answer: ${userAnswer ? userAnswer.text : 'No answer'}
   Description: ${illusion.description || 'No description available'}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'memory':
        const memoryResults = JSON.parse(searchParams.get('results') || '{}')
        const memoryChallenges = JSON.parse(searchParams.get('challenges') || '[]')
        const memoryAnswers = JSON.parse(searchParams.get('answers') || '{}')
        
        content += `Memory Challenge Results:

Your Results:
- Performance: ${memoryResults.performance || 'Memory Performance'}
- Challenge Score: ${Number(memoryResults.memoryScore) || 0}%
- Detailed Accuracy: ${Number(memoryResults.detailedAccuracy) || 0}%
- Total Correct: ${Number(memoryResults.totalCorrect) || 0}/${Number(memoryResults.totalItems) || 0}
- Detailed Correct: ${Number(memoryResults.totalCorrectItems) || 0}/${Number(memoryResults.totalDetailedItems) || 0}

Challenge Review:
${memoryChallenges.map((challenge: any, index: number) => {
          const userAnswer = memoryAnswers[challenge.id]
          const isCorrect = userAnswer && userAnswer.correct
          // Convert emojis to text for better readability
          const emojiToText = (item: string) => {
            const emojiMap: Record<string, string> = {
              // Weather
              '☀️': 'Sunny',
              '⛅': 'Cloudy', 
              '🌩️': 'Stormy',
              '🌤️': 'Partly Cloudy',
              '❄️': 'Snowy',
              '🌧️': 'Rainy',
              '🌈': 'Rainbow',
              '🌙': 'Moon',
              '⭐': 'Star',
              // Objects
              '🔥': 'Fire',
              '💧': 'Water',
              '🌱': 'Plant',
              // Fruits
              '🍎': 'Apple',
              '🍌': 'Banana',
              '🍊': 'Orange',
              '🍇': 'Grape',
              '🍒': 'Cherry',
              '🍓': 'Strawberry',
              '🍑': 'Peach',
              '🥝': 'Kiwi',
              '🍍': 'Pineapple',
              '🥭': 'Mango',
              '🍋': 'Lemon',
              '🥥': 'Coconut',
              // Colors
              '🔴': 'Red',
              '🔵': 'Blue',
              '🟢': 'Green',
              '🟡': 'Yellow',
              '🟣': 'Purple',
              '🟠': 'Orange',
              '⚪': 'White',
              '⚫': 'Black',
              '🟤': 'Brown',
              '🟥': 'Red Square',
              '🟦': 'Blue Square',
              '🟩': 'Green Square',
              '🟨': 'Yellow Square',
              '🟧': 'Orange Square',
              '🟪': 'Purple Square',
              // Vehicles
              '🚗': 'Car',
              '🚕': 'Taxi',
              '🚙': 'SUV',
              '🚌': 'Bus',
              '🚎': 'Trolleybus',
              '🏎️': 'Race Car',
              '🚓': 'Police Car',
              '🚑': 'Ambulance',
              '🚒': 'Fire Truck',
              '🚐': 'Van',
              '🛻': 'Pickup Truck',
              '🚚': 'Truck',
              '🚛': 'Articulated Truck',
              '🚜': 'Tractor',
              '🏍️': 'Motorcycle',
              '🛵': 'Scooter',
              '🚲': 'Bicycle',
              '🛴': 'Scooter',
              '🚁': 'Helicopter',
              '✈️': 'Airplane',
              '🛩️': 'Small Airplane',
              '🛫': 'Airplane Departure',
              '🛬': 'Airplane Arrival',
              '🪂': 'Parachute',
              '💺': 'Seat',
              '🚀': 'Rocket',
              '🛸': 'Flying Saucer',
              '🚉': 'Station',
              '🚊': 'Tram',
              '🚝': 'Monorail',
              '🚞': 'Mountain Railway',
              '🚋': 'Tram Car',
              '🚃': 'Railway Car',
              '🚋': 'Tram Car',
              '🚆': 'Train',
              '🚄': 'High-Speed Train',
              '🚅': 'Bullet Train',
              '🚈': 'Light Rail',
              '🚂': 'Steam Locomotive',
              '🚆': 'Train',
              '🚇': 'Metro',
              '🚊': 'Tram',
              '🚉': 'Station',
              '🚢': 'Ship',
              '⛴️': 'Ferry',
              '🛥️': 'Motor Boat',
              '🚤': 'Speedboat',
              '⛵': 'Sailboat',
              '🛶': 'Canoe',
              '🚣': 'Rowboat',
              '🏊': 'Swimmer',
              '🏄': 'Surfer',
              '🏇': 'Horse Racing',
              '🚴': 'Cyclist',
              '🏃': 'Runner',
              '🚶': 'Walker',
              '🚵': 'Mountain Biker',
              '🏋️': 'Weight Lifter',
              '🤸': 'Cartwheeler',
              '🤾': 'Handball Player',
              '🤽': 'Water Polo Player',
              '🤼': 'Wrestlers',
              '🤺': 'Fencer',
              '🏌️': 'Golfer',
              '🏇': 'Horse Racing',
              '⛷️': 'Skier',
              '🏂': 'Snowboarder',
              '🏄': 'Surfer',
              '🏊': 'Swimmer',
              '🏋️': 'Weight Lifter',
              '🚴': 'Cyclist',
              '🚵': 'Mountain Biker',
              '🏃': 'Runner',
              '🚶': 'Walker',
              '🏃‍♀️': 'Woman Running',
              '🏃‍♂️': 'Man Running',
              '🚶‍♀️': 'Woman Walking',
              '🚶‍♂️': 'Man Walking',
              '💃': 'Woman Dancing',
              '🕺': 'Man Dancing',
              '👯': 'People with Bunny Ears',
              '👯‍♀️': 'Women with Bunny Ears',
              '👯‍♂️': 'Men with Bunny Ears',
              '🧘': 'Person in Lotus Position',
              '🧘‍♀️': 'Woman in Lotus Position',
              '🧘‍♂️': 'Man in Lotus Position',
              '🏃‍♀️': 'Woman Running',
              '🏃‍♂️': 'Man Running',
              '🚶‍♀️': 'Woman Walking',
              '🚶‍♂️': 'Man Walking',
              '💃': 'Woman Dancing',
              '🕺': 'Man Dancing',
              '👯': 'People with Bunny Ears',
              '👯‍♀️': 'Women with Bunny Ears',
              '👯‍♂️': 'Men with Bunny Ears',
              '🧘': 'Person in Lotus Position',
              '🧘‍♀️': 'Woman in Lotus Position',
              '🧘‍♂️': 'Man in Lotus Position',
              // Animals (from memory challenges)
              '🐱': 'Cat',
              '🐶': 'Dog',
              '🐰': 'Rabbit',
              '🐸': 'Frog',
              '🐯': 'Tiger',
              '🦁': 'Lion',
              '🐻': 'Bear',
              '🐼': 'Panda',
              '🐨': 'Koala',
              '🐵': 'Monkey',
              '🐔': 'Chicken',
              '🐧': 'Penguin',
              // Directions (from memory challenges)
              '↑': 'Up Arrow',
              '↓': 'Down Arrow',
              '←': 'Left Arrow',
              '→': 'Right Arrow',
              '↗': 'Up Right Arrow',
              '↘': 'Down Right Arrow',
              '↙': 'Down Left Arrow',
              '↖': 'Up Left Arrow',
              // Weather (from memory challenges)
              '🌪️': 'Tornado',
              '🌤️': 'Partly Cloudy',
              '🌩️': 'Lightning',
              // Patterns (from memory challenges)
              '▲': 'Triangle',
              '●': 'Circle',
              '■': 'Square',
              '◆': 'Diamond',
              '★': 'Star',
              '♦': 'Diamond Suit',
              '♠': 'Spade Suit',
              '♣': 'Club Suit',
              '♥': 'Heart Suit'
            }
            return emojiMap[item] || item
          }
          
          const sequenceToMemorize = challenge.sequence ? challenge.sequence.map(emojiToText).join(', ') : 'No sequence data'
          const userSequence = userAnswer && userAnswer.userSequence ? userAnswer.userSequence.map(emojiToText).join(', ') : (userAnswer ? 'Completed' : 'No answer')
          return `${index + 1}. ${challenge.title}
   Sequence to Memorize: ${sequenceToMemorize}
   Your Answer: ${userSequence}
   Result: ${isCorrect ? 'Correct' : 'Incorrect'}
   ${challenge.description ? `Description: ${challenge.description}` : ''}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      case 'emotional-intelligence':
        const eqResults = JSON.parse(searchParams.get('results') || '{}')
        const eqQuestions = JSON.parse(searchParams.get('questions') || '[]')
        const eqAnswers = JSON.parse(searchParams.get('answers') || '[]')
        
        content += `Emotional Intelligence Test Results:

Overall Results:
- EQ Level: ${eqResults.overallLevel || 'EQ Assessment'}
- Overall Score: ${eqResults.totalScore || 0}/5
- Description: ${eqResults.description || 'Emotional intelligence assessment results'}

EQ Components:
- Self-Awareness: ${eqResults.selfAwareness || 0}/5
- Self-Regulation: ${eqResults.selfRegulation || 0}/5
- Motivation: ${eqResults.motivation || 0}/5
- Empathy: ${eqResults.empathy || 0}/5
- Social Skills: ${eqResults.socialSkills || 0}/5

Areas for Growth:
${eqResults.areasForGrowth && eqResults.areasForGrowth.length > 0 ? eqResults.areasForGrowth.map((area: string) => `- ${area}`).join('\n') : '- Great job! Keep maintaining your EQ skills'}

Key Insights:
${eqResults.insights && eqResults.insights.length > 0 ? eqResults.insights.map((insight: string) => `- ${insight}`).join('\n') : '- Continue developing your emotional intelligence'}

Question Review:
${eqQuestions.map((question: any, index: number) => {
          const userAnswer = eqAnswers[index]
          const selectedOption = question.options[userAnswer]
          return `${index + 1}. ${question.question}
   Your Answer: ${selectedOption?.text || 'No answer'}
   Category: ${question.category}
`
        }).join('\n')}

Generated by TestYourself
Visit https://testyourself.com for more tests!`
        break

      default:
        content += `Test Results saved successfully!

Generated by TestYourself
Visit https://testyourself.com for more tests!`
    }

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${testType === 'personality' ? 'character-assessment' : testType}-test-results-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const renderPersonalityResults = () => {
    const type = searchParams.get('type')
    const answers = JSON.parse(searchParams.get('answers') || '{}')
    const questions = JSON.parse(searchParams.get('questions') || '[]')
    const personality = personalityTypes[type as string]

    if (!personality) {
      return (
        <div className="text-center">
          <p className="text-sage-600">Unable to load results. Please try again.</p>
        </div>
      )
    }

    return (
      <div className="space-y-2">
        {/* Main Result */}
        <div className="text-center">
          <div className="bg-sage-50 rounded-2xl shadow-lg p-6 mb-2">
            <h2 className="text-xl text-sage-800 mb-2">
              <span className="font-bold">Your Results</span> - Here's what we discovered about you
            </h2>
            <div className="flex items-center justify-center gap-4 mb-2">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-sage-500 rounded-full text-white text-xl font-bold">
                {type}
              </div>
              <h2 className="text-xl font-bold text-sage-800">
                {personality.name}
              </h2>
            </div>
            <p className="text-lg text-sage-600 max-w-2xl mx-auto">
              {personality.description}
            </p>
          </div>
        </div>

        {/* Traits */}
        <div className="bg-sage-50 rounded-2xl shadow-lg p-6">
          <h3 className="text-xl font-semibold text-sage-800 mb-2">Your Traits</h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {personality.traits.map((trait: string, index: number) => (
              <div key={index} className="bg-white rounded-lg py-2 px-3 text-center shadow-lg hover:shadow-xl transition-shadow duration-200">
                <span className="text-sage-700 font-medium text-sm">{trait}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Areas for Growth */}
        <div className="bg-lavender-50 rounded-2xl shadow-lg p-6">
          <h3 className="text-xl font-semibold text-lavender-600 mb-2">Areas for Growth</h3>
          <div className="grid grid-cols-2 gap-2">
            {personality.weaknesses.map((weakness: string, index: number) => (
              <div key={index} className="flex items-start">
                <span className="text-lavender-500 mr-2 text-sm">•</span>
                <span className="text-sage-700 text-sm">{weakness}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  const renderTriviaResults = () => {
    const score = parseInt(searchParams.get('score') || '0', 10) || 0
    const speed = searchParams.get('speed') || 'Unknown'
    const correct = parseInt(searchParams.get('correct') || '0', 10) || 0
    const total = parseInt(searchParams.get('total') || '0', 10) || 0
    const results = JSON.parse(searchParams.get('results') || '{}')
    const answers = JSON.parse(searchParams.get('answers') || '{}')
    const questions = JSON.parse(searchParams.get('questions') || '[]')

    if (score === 0 && total === 0) {
      return (
        <div className="text-center">
          <p className="text-sage-600">Unable to load results. Please try again.</p>
        </div>
      )
    }

    return (
      <div className="space-y-2">
        {/* Test Title */}
        <div className="text-center mb-2 mt-2">
          <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
            <h1 className="text-lg font-bold text-gray-800">
              Trivia Quiz Results
            </h1>
          </div>
        </div>

        {/* Main Result */}
        <div className="text-center">
          <div className="bg-sage-50 rounded-2xl shadow-lg p-6 mb-2">
            <h2 className="text-xl text-sage-800 mb-2">
              <span className="font-bold">Your Results</span> - Here's what we discovered about you
            </h2>
            <div className="text-xl mb-2">🎯</div>
            <h2 className="text-xl font-bold text-green-800 mb-2">
              {score}%
            </h2>
            <p className="text-xl text-green-600 mb-2">
              {correct} out of {total} correct
            </p>
            <p className="text-lg text-gray-700">
              {speed}
            </p>
          </div>
        </div>

        {/* Score Breakdown */}
        <div className="bg-purple-50 rounded-2xl shadow-lg p-8">
          <h3 className="text-xl font-semibold text-green-800 mb-2 text-center">Quiz Summary</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-green-50 border-2 border-green-200 rounded-xl p-6 text-center">
              <h4 className="text-xl font-bold text-green-800 mb-2">{score}%</h4>
              <p className="text-green-600 font-medium">Accuracy</p>
            </div>
            <div className="bg-blue-50 border-2 border-blue-200 rounded-xl p-6 text-center">
              <h4 className="text-xl font-bold text-blue-800 mb-2">{correct}/{total}</h4>
              <p className="text-blue-600 font-medium">Correct Answers</p>
            </div>
            <div className="bg-purple-50 border-2 border-gray-300 rounded-xl p-6 text-center">
              <h4 className="text-lg font-bold text-purple-800 mb-2">{speed}</h4>
              <p className="text-purple-600 font-medium">Speed Rating</p>
            </div>
          </div>
        </div>
      </div>
    )
  }

  const renderOpticalIllusionResults = () => {
    const results = JSON.parse(searchParams.get('results') || '{}')
    const answers = JSON.parse(searchParams.get('answers') || '{}')
    const illusions = JSON.parse(searchParams.get('illusions') || '[]')
    
    return (
      <div className="space-y-2">
        {/* Test Title */}
        <div className="text-center mb-2 mt-2">
          <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
            <h1 className="text-lg font-bold text-gray-800">
              Optical Illusion Test Results
            </h1>
          </div>
        </div>

        {/* Main Result */}
        <div className="text-center">
          <div className="bg-sage-50 rounded-2xl shadow-lg p-6 mb-2">
            <h2 className="text-xl text-sage-800 mb-2">
              <span className="font-bold">Your Results</span> - Here's what we discovered about you
            </h2>
            <div className="text-xl mb-2">👁️</div>
            <h2 className="text-xl font-bold text-sage-800 mb-2">
              {results.overallType || 'Visual Perceiver'}
            </h2>
            <p className="text-sage-600">
              Your visual perception reveals unique insights about your cognitive style
            </p>
          </div>
        </div>

        {/* Overall Results */}
        <div className="bg-sage-50 rounded-2xl p-8 border border-sage-200">
          
          {/* Personality Traits */}
          {results.personalityTraits && Object.keys(results.personalityTraits).length > 0 && (
            <div className="mb-2">
              <h3 className="text-xl font-semibold text-sage-800 mb-2">Your Visual Processing Style</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {Object.entries(results.personalityTraits).map(([trait, count], index) => (
                  <div key={index} className="rounded-lg p-4 border border-sage-200" style={{backgroundColor: '#fefcff'}}>
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium text-sage-700">{trait}</span>
                      <span className="text-sm text-sage-500">{Number(count) || 0} times</span>
                    </div>
                    <div className="w-full bg-sage-200 rounded-full h-2">
                      <div 
                        className="bg-sage-500 h-2 rounded-full"
                        style={{ width: `${results.totalQuestions > 0 ? Math.round((Number(count) / Number(results.totalQuestions)) * 100) : 0}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Insights */}
          {results.insights && results.insights.length > 0 && (
            <div>
              <h3 className="text-xl font-semibold text-sage-800 mb-2">Key Insights</h3>
              <div className="space-y-2">
                {results.insights.map((insight: string, index: number) => (
                  <div key={index} className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-sage-400 rounded-full mt-2 flex-shrink-0"></div>
                    <p className="text-sage-700">{insight}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    )
  }

  const renderMemoryResults = () => {
    const results = JSON.parse(searchParams.get('results') || '{}')
    const answers = JSON.parse(searchParams.get('answers') || '{}')
    const challenges = JSON.parse(searchParams.get('challenges') || '[]')
    
    return (
      <div className="space-y-2 overflow-x-hidden">
        {/* Test Title */}
        <div className="text-center mb-2 mt-2">
          <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
            <h1 className="text-lg font-bold text-gray-800">
              Memory Challenge Results
            </h1>
          </div>
        </div>

        {/* Main Result */}
        <div className="text-center">
          <div className="bg-sage-50 rounded-2xl shadow-lg p-6 mb-2 overflow-x-hidden">
            <h2 className="text-xl text-sage-800 mb-2">
              <span className="font-bold">Your Results</span> - Here's what we discovered about you
            </h2>
            <div className="text-xl mb-2">🧩</div>
            <h2 className="text-xl font-bold text-sage-800 mb-2">
              {results.performance || 'Memory Performance'}
            </h2>
            <p className="text-sage-600 mb-2">
              Your memory skills performance
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="text-xl font-bold text-sage-800 mb-2">
                  {Number(results.memoryScore) || 0}%
                </h3>
                <p className="text-sage-600 font-medium text-lg">Challenge Score</p>
                <p className="text-sage-500 text-sm mt-1">
                  {Number(results.totalCorrect) || 0} out of {Number(results.totalItems) || 0} challenges completed
                </p>
              </div>
              <div>
                <h3 className="text-xl font-bold text-sage-800 mb-2">
                  {Number(results.detailedAccuracy) || 0}%
                </h3>
                <p className="text-sage-600 font-medium text-lg">Detailed Accuracy</p>
                <p className="text-sage-500 text-sm mt-1">
                  {Number(results.totalCorrectItems) || 0} out of {Number(results.totalDetailedItems) || 0} items correct
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Key Insights - Separate Box */}
        {results.insights && results.insights.length > 0 && (
          <div className="bg-sage-50 rounded-2xl p-8 border border-sage-200 overflow-x-hidden">
            <h3 className="text-xl font-semibold text-sage-800 mb-2">Key Insights</h3>
            <div className="space-y-2">
              {results.insights.map((insight: string, index: number) => (
                <div key={index} className="flex items-start space-x-3">
                  <div className="w-2 h-2 bg-sage-400 rounded-full mt-2 flex-shrink-0"></div>
                  <p className="text-sage-700 break-words max-w-full">{insight}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderEmotionalIntelligenceResults = () => {
    const results = JSON.parse(searchParams.get('results') || '{}')
    const questions = JSON.parse(searchParams.get('questions') || '[]')
    const answers = JSON.parse(searchParams.get('answers') || '[]')

    if (!results || Object.keys(results).length === 0) {
      return (
        <div className="text-center p-8">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">No Results Available</h2>
          <p className="text-gray-600">Unable to load results. Please try again.</p>
        </div>
      )
    }

    return (
      <div className="space-y-2">
        {/* Overall Score - Two Column Layout */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-2">
          {/* Left Box - Score */}
          <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl shadow-lg p-5">
            <div className="text-center">
              <h2 className="text-lg text-sage-800 mb-3">
                <span className="font-bold">Your Results</span> - Here's what we discovered about you
              </h2>
              <div className="text-4xl font-bold text-blue-600 mb-2" aria-label={`EQ Score: ${results.totalScore} out of 5`}>{results.totalScore}/5</div>
              <div className="text-xl font-semibold text-gray-800" aria-label={`EQ Level: ${results.overallLevel}`}>{results.overallLevel}</div>
            </div>
          </div>
          
          {/* Right Box - Description */}
          <div className="bg-gradient-to-r from-green-50 to-teal-50 rounded-2xl shadow-lg p-5">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-800 mb-3">What This Means</h3>
              <p className="text-gray-600 text-sm">{results.description}</p>
            </div>
          </div>
        </div>

        {/* EQ Components and Areas for Growth */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-2">
          {/* EQ Components */}
          <div className="lg:col-span-2 bg-sage-50 rounded-2xl shadow-lg p-5">
            <h3 className="text-xl font-semibold text-gray-800 mb-4 text-center">EQ Components Breakdown</h3>
            <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                   <div className="bg-white rounded-lg p-3 text-center">
                     <div className="text-2xl font-bold text-blue-600 mb-1" aria-label={`Self-Awareness Score: ${results.selfAwareness} out of 5`}>{results.selfAwareness}/5</div>
                     <div className="text-sm font-medium text-gray-600">Self-Awareness</div>
                   </div>
                   <div className="bg-white rounded-lg p-3 text-center">
                     <div className="text-2xl font-bold text-green-600 mb-1" aria-label={`Self-Regulation Score: ${results.selfRegulation} out of 5`}>{results.selfRegulation}/5</div>
                     <div className="text-sm font-medium text-gray-600">Self-Regulation</div>
                   </div>
                   <div className="bg-white rounded-lg p-3 text-center">
                     <div className="text-2xl font-bold text-purple-600 mb-1" aria-label={`Motivation Score: ${results.motivation} out of 5`}>{results.motivation}/5</div>
                     <div className="text-sm font-medium text-gray-600">Motivation</div>
                   </div>
                   <div className="bg-white rounded-lg p-3 text-center">
                     <div className="text-2xl font-bold text-orange-600 mb-1" aria-label={`Empathy Score: ${results.empathy} out of 5`}>{results.empathy}/5</div>
                     <div className="text-sm font-medium text-gray-600">Empathy</div>
                   </div>
                   <div className="bg-white rounded-lg p-3 text-center">
                     <div className="text-2xl font-bold text-red-600 mb-1" aria-label={`Social Skills Score: ${results.socialSkills} out of 5`}>{results.socialSkills}/5</div>
                     <div className="text-sm font-medium text-gray-600">Social Skills</div>
                   </div>
            </div>
          </div>

          {/* Areas for Growth */}
          <div className="bg-orange-50 rounded-2xl shadow-lg p-5">
            <h3 className="text-lg font-semibold text-orange-800 mb-3">Areas for Growth</h3>
            {results.areasForGrowth && results.areasForGrowth.length > 0 ? (
              <ul className="space-y-2">
                {results.areasForGrowth.map((area: string, index: number) => (
                  <li key={index} className="text-orange-700 text-sm">• {area}</li>
                ))}
              </ul>
            ) : (
              <p className="text-orange-600 text-sm">Great job! Keep maintaining your EQ skills</p>
            )}
          </div>
        </div>

        {/* Key Insights */}
        <div className="bg-blue-50 rounded-2xl shadow-lg p-5 mb-0">
          <h3 className="text-lg font-semibold text-blue-800 mb-3">Key Insights</h3>
          <ul className="space-y-2">
            {results.insights && results.insights.map((insight: string, index: number) => (
              <li key={index} className="text-blue-700 text-sm">• {insight}</li>
            ))}
          </ul>
        </div>
      </div>
    )
  }

  const renderOtherResults = () => {
    return (
      <div className="space-y-2">
        <div className="text-center">
          <h2 className="text-xl font-bold text-sage-800 mb-2">
            Test Complete!
          </h2>
          <p className="text-sage-600">
            Results for {testType} test will be displayed here.
          </p>
        </div>
      </div>
    )
  }

  // Dynamic SEO content based on test type
  const getSEOContent = () => {
    const baseUrl = 'https://testyourself.com'
    
    switch (testType) {
      case 'personality':
        return {
          title: 'Character Assessment Results - Free Personality Type Test | TestYourself',
          description: 'View your detailed character assessment results! Discover your personality type, character traits, and behavioral patterns. Get comprehensive insights into your personality preferences and cognitive style with our free personality test.',
          keywords: 'character assessment results, personality test results, personality type, character traits, behavioral patterns, personality analysis, cognitive style, personality preferences, free personality test',
          ogTitle: 'Character Assessment Results - Free Personality Type Test',
          ogDescription: 'View your detailed character assessment results! Discover your personality type, character traits, and behavioral patterns.',
          ogImage: `${baseUrl}/images/character-assessment-results-og.jpg`,
          canonical: `${baseUrl}/results/personality`
        }
      case 'trivia':
        return {
          title: 'Trivia Quiz Results - Free Knowledge Test Results | TestYourself',
          description: 'Check your trivia quiz results! See your knowledge test score, accuracy, and speed performance. Discover which topics you excel in and areas for improvement.',
          keywords: 'trivia quiz results, knowledge test results, quiz score, general knowledge results, trivia performance, quiz accuracy',
          ogTitle: 'Trivia Quiz Results - Knowledge Test Results',
          ogDescription: 'Check your trivia quiz results! See your knowledge test score, accuracy, and speed performance.',
          ogImage: `${baseUrl}/trivia-results-og-image.jpg`,
          canonical: `${baseUrl}/results/trivia`
        }
      case 'optical-illusion':
        return {
          title: 'Optical Illusion Test Results - Visual Perception Analysis | TestYourself',
          description: 'Explore your optical illusion test results! Understand how your brain processes visual information and discover your cognitive style. Learn about your visual perception patterns.',
          keywords: 'optical illusion results, visual perception results, cognitive test results, visual processing, brain test results, perception analysis',
          ogTitle: 'Optical Illusion Test Results - Visual Perception Analysis',
          ogDescription: 'Explore your optical illusion test results! Understand how your brain processes visual information and discover your cognitive style.',
          ogImage: `${baseUrl}/optical-illusion-results-og-image.jpg`,
          canonical: `${baseUrl}/results/optical-illusion`
        }
      case 'memory':
        return {
          title: 'Memory Challenge Results - Cognitive Memory Assessment | TestYourself',
          description: 'Review your memory challenge results! Analyze your short-term memory capacity, sequence memorization skills, and cognitive performance. Track your memory improvement.',
          keywords: 'memory test results, memory challenge results, cognitive memory results, short-term memory, memory capacity, sequence memory results',
          ogTitle: 'Memory Challenge Results - Cognitive Memory Assessment',
          ogDescription: 'Review your memory challenge results! Analyze your short-term memory capacity, sequence memorization skills, and cognitive performance.',
          ogImage: `${baseUrl}/memory-results-og-image.jpg`,
          canonical: `${baseUrl}/results/memory`
        }
      case 'emotional-intelligence':
        return {
          title: 'Emotional Intelligence Test Results - EQ Assessment & Analysis | TestYourself',
          description: 'View your Emotional Intelligence test results! Discover your EQ level, strengths, and areas for growth. Get detailed insights into your emotional awareness, empathy, and social skills.',
          keywords: 'emotional intelligence test results, EQ test results, emotional intelligence assessment, EQ level, emotional awareness, empathy test, social skills assessment, emotional intelligence analysis',
          ogTitle: 'Emotional Intelligence Test Results - EQ Assessment & Analysis',
          ogDescription: 'View your Emotional Intelligence test results! Discover your EQ level, strengths, and areas for growth. Get detailed insights into your emotional awareness.',
          ogImage: `${baseUrl}/emotional-intelligence-results-og-image.jpg`,
          canonical: `${baseUrl}/results/emotional-intelligence`
        }
      default:
        return {
          title: 'Test Results - Free Online Assessment Results | TestYourself',
          description: 'View your test results and performance analysis! Get detailed insights into your performance across various cognitive and personality assessments.',
          keywords: 'test results, assessment results, performance analysis, cognitive test results, personality test results',
          ogTitle: 'Test Results - Online Assessment Results',
          ogDescription: 'View your test results and performance analysis! Get detailed insights into your performance across various assessments.',
          ogImage: `${baseUrl}/test-results-og-image.jpg`,
          canonical: `${baseUrl}/results/${testType}`
        }
    }
  }

  const seoContent = getSEOContent()

  return (
    <>
      <Head>
        {/* Basic Meta Tags */}
        <title>{seoContent.title}</title>
        <meta name="description" content={seoContent.description} />
        <meta name="keywords" content={seoContent.keywords} />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="canonical" href={seoContent.canonical} />
        
        {/* Open Graph Tags */}
        <meta property="og:title" content={seoContent.ogTitle} />
        <meta property="og:description" content={seoContent.ogDescription} />
        <meta property="og:image" content={seoContent.ogImage} />
        <meta property="og:url" content={seoContent.canonical} />
        <meta property="og:type" content="website" />
        <meta property="og:site_name" content="TestYourself" />
        
        {/* Twitter Card Tags */}
        <meta name="twitter:card" content="summary_large_image" />
        <meta name="twitter:title" content={seoContent.ogTitle} />
        <meta name="twitter:description" content={seoContent.ogDescription} />
        <meta name="twitter:image" content={seoContent.ogImage} />
        
        {/* JSON-LD Schema Markup */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebApplication",
              "name": testType === 'personality' ? "Character Assessment Test" :
                     testType === 'emotional-intelligence' ? "Emotional Intelligence Test" :
                     testType === 'trivia' ? "Trivia Quiz" :
                     testType === 'optical-illusion' ? "Optical Illusion Test" :
                     testType === 'memory' ? "Memory Challenge" :
                     "TestYourself Assessment",
              "description": testType === 'personality' ? "Free personality type test based on character assessment principles. Discover your personality traits and behavioral patterns." :
                           testType === 'emotional-intelligence' ? "Free emotional intelligence test to assess your EQ level, emotional awareness, empathy, and social skills." :
                           testType === 'trivia' ? "Free trivia quiz to test your general knowledge across various categories." :
                           testType === 'optical-illusion' ? "Free optical illusion test to understand your visual perception and cognitive style." :
                           testType === 'memory' ? "Free memory challenge to test your cognitive memory and recall abilities." :
                           "Free online assessments and tests for self-discovery.",
              "url": seoContent.canonical,
              "applicationCategory": "PsychologyApplication",
              "operatingSystem": "Web Browser",
              "offers": {
                "@type": "Offer",
                "price": "0",
                "priceCurrency": "USD"
              },
              "creator": {
                "@type": "Organization",
                "name": "TestYourself",
                "url": "https://testyourself.com"
              },
              "mainEntity": {
                "@type": "FAQPage",
                "mainEntity": testType === 'emotional-intelligence' ? [
                  {
                    "@type": "Question",
                    "name": "What is emotional intelligence (EQ)?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Emotional intelligence is the ability to recognize, understand, and manage your own emotions, as well as recognize and influence the emotions of others. It includes self-awareness, self-regulation, motivation, empathy, and social skills."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "How accurate is the emotional intelligence test?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Our emotional intelligence test is based on established EQ assessment principles and provides insights into your emotional awareness and social skills. While no test is 100% accurate, it offers valuable self-discovery insights."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "How long does the emotional intelligence test take?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "The emotional intelligence test typically takes 5-7 minutes to complete, with 15 carefully selected questions designed to assess your EQ across five key components."
                    }
                  }
                ] : [
                  {
                    "@type": "Question",
                    "name": "What is a character assessment test?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "A character assessment test is a psychological evaluation that analyzes your personality traits, behavioral patterns, and cognitive preferences to determine your personality type."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "How accurate is the character assessment test?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "Our character assessment test is based on established psychological principles and provides insights into your personality preferences. While no test is 100% accurate, it offers valuable self-discovery insights."
                    }
                  },
                  {
                    "@type": "Question",
                    "name": "How long does the character assessment take?",
                    "acceptedAnswer": {
                      "@type": "Answer",
                      "text": "The character assessment test typically takes 5-10 minutes to complete, with 15 carefully selected questions designed to reveal your personality preferences."
                    }
                  }
                ]
              }
            })
          }}
        />
        
        {/* Quiz Schema for Emotional Intelligence Test */}
        {testType === 'emotional-intelligence' && (
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify({
                "@context": "https://schema.org",
                "@type": "Quiz",
                "name": "Emotional Intelligence Test",
                "description": "Free emotional intelligence test to assess your EQ level, emotional awareness, empathy, and social skills",
                "about": "Emotional Intelligence Assessment",
                "educationalLevel": "Beginner",
                "educationalUse": "Assessment",
                "learningResourceType": "Quiz",
                "interactivityType": "Active",
                "typicalAgeRange": "16-99",
                "timeRequired": "PT5M",
                "isAccessibleForFree": true,
                "inLanguage": "en-US",
                "provider": {
                  "@type": "Organization",
                  "name": "TestYourself",
                  "url": "https://testyourself.com"
                },
                "offers": {
                  "@type": "Offer",
                  "price": "0",
                  "priceCurrency": "USD",
                  "availability": "https://schema.org/InStock"
                }
              })
            }}
          />
        )}
        
        {/* Structured Data */}
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebPage",
              "name": seoContent.ogTitle,
              "description": seoContent.description,
              "url": seoContent.canonical,
              "provider": {
                "@type": "Organization",
                "name": "TestYourself",
                "url": "https://testyourself.com"
              },
              "about": {
                "@type": "Thing",
                "name": testType === 'personality' ? 'Personality Assessment Results' :
                       testType === 'emotional-intelligence' ? 'Emotional Intelligence Assessment Results' :
                       testType === 'trivia' ? 'Trivia Quiz Results' :
                       testType === 'optical-illusion' ? 'Visual Perception Results' :
                       testType === 'memory' ? 'Memory Assessment Results' :
                       'Test Results',
                "description": seoContent.description
              },
              "mainEntity": {
                "@type": "Quiz",
                "name": seoContent.ogTitle,
                "description": seoContent.description,
                "url": seoContent.canonical
              },
              "inLanguage": "en",
              "isAccessibleForFree": true
            })
          }}
        />
      </Head>
      
      <div className="min-h-screen flex flex-col">
      <div className="pt-2 px-4 sm:px-6 lg:px-8 flex-grow">
        <div className="max-w-6xl mx-auto overflow-x-hidden">
        {/* Header */}
        <Header onLogoClick={undefined} />
        
            {/* Test Title */}
            <div className="text-center mb-2 mt-2">
            <div className="bg-white rounded-2xl shadow-lg px-2 py-0.5">
              <h1 className="text-lg font-bold text-gray-800">
                {testType === 'personality' ? 'Character Assessment Results' :
                 testType === 'trivia' ? 'Trivia Quiz Results' :
                   testType === 'memory' ? 'Memory Challenge Results' :
                 testType === 'optical-illusion' ? 'Optical Illusion Test Results' :
                   testType === 'emotional-intelligence' ? 'Emotional Intelligence Test Results' :
                 'Test Results'}
              </h1>
            </div>
          </div>

            {/* Results Content */}
            <div className="mt-2">
              {testType === 'personality' ? renderPersonalityResults() : 
               testType === 'trivia' ? renderTriviaResults() : 
               testType === 'optical-illusion' ? renderOpticalIllusionResults() :
               testType === 'memory' ? renderMemoryResults() :
               testType === 'emotional-intelligence' ? renderEmotionalIntelligenceResults() :
               renderOtherResults()}
                        </div>
                        
            {/* Action Buttons */}
            <div className="mt-2 mb-2">
          <div className="bg-gray-50 rounded-2xl shadow-lg p-2">
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button
                    onClick={() => router.push(`/results/${testType}/share?${searchParams.toString()}`)}
                className="px-8 py-3 bg-sage-500 text-white rounded-full font-medium hover:bg-sage-600 transition-all duration-300"
              >
                    📤 Share Results
              </button>
                  {(testType === 'optical-illusion' || testType === 'memory' || testType === 'trivia' || testType === 'personality' || testType === 'emotional-intelligence') && (
                <button
                      onClick={() => router.push(`/results/${testType}/review?${searchParams.toString()}`)}
                  className="px-8 py-3 bg-blue-500 text-white rounded-full font-medium hover:bg-blue-600 transition-all duration-300"
                >
                      📋 Show Review
                </button>
              )}
              <button
                onClick={saveResults}
                className="px-8 py-3 bg-orange-500 text-white rounded-full font-medium hover:bg-orange-600 transition-all duration-300"
              >
                💾 Save Results
              </button>
              <button
                onClick={() => router.push(`/${testType}`)}
                className="px-8 py-3 bg-green-500 text-white rounded-full font-medium hover:bg-green-600 transition-all duration-300"
              >
                {testType === 'typing' ? '🔄 Try Another Challenge' : '🔄 Retake Test'}
              </button>
            </div>
          </div>
        </div>


        </div>
      </div>
      
      {/* Footer Component */}
      <Footer />
    </div>
    </>
  )
}
